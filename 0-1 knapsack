class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int recursion(int index,int W,int wt[],int val[],vector<vector<int>>&dp){
        if(index==0){
            if(W>=wt[0]){
            return val[0];
            }
            else{
                return 0;
            }
        }
        if(dp[index][W]!=-1){
            return dp[index][W];
        }
        
        int not_take=recursion(index-1,W,wt,val,dp);
        int take=wt[index]<=W? recursion(index-1,W-wt[index],wt,val,dp)+val[index]:-1e9;
        return dp[index][W]=max(not_take,take);
    }
    int knapSack(int W, int wt[], int val[], int n) 
    { 
        vector<vector<int>>dp(n,vector<int>(W+1,-1));
       return recursion(n-1,W,wt,val,dp);
    }
};
